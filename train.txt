import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms

def train():
    transform = transforms.Compose(
       [transforms.Resize([356, 356]),
        transforms.Randomcrop((299,299)),
        transforms.ToTensor(), 
        transforms.Normalize(mean=[0.5,0.5,0.5], std= [0.5,0.5, 0.5])
       ])
    train_loader = get_loader(
        root_folder = "/content/drive/MyDrive/Colab Notebooks/archive (1)/flickr8k/images",
        annotation_file= "/content/drive/MyDrive/Colab Notebooks/archive (1)/flickr8k/captions.txt",
        transform = tranform,
        num_workers = 2
    )

    torch.backends.cudnn.benchmark = True
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    load_model = False
    save_model = True


    embed_size = 256
    hidden_size = 256
    vocab_size = len(dataset.vocab)
    num_layers = 1
    learning_rate = 3e-4
    num_epochs = 100

    model = CNNtoRNN(embed_size, hidden_size, vocab_size,num_layers).to(device)
    criterion = nn.CrossEntropyLoss(ignore_index = dataset.vocab.stoi["<PAD>"])
    optimizer = optim.Adam(model.parameters(), lr = learning_rate)
    
    
    model.train()
    
    for epoch in range(num_epochs):
        for idx,(imgs,captions) in enumerate(train_loader):
            imgs = imgs.to(device)
            captions = captions.to(device)
            outputs = model(imgs,captions[:-1])
            loss = criterion(outputs.reshape(-1, outputs.shape[2]),captions.reshape(-1))
            optimizer.zero_grad()
            loss.backward(loss)
            optimizer.step()
            print("Step: {}/{}, Loss: {:.4f}, Accuracy: {:.4f}%".format(i+1, len(dataset), epoch_loss/(i+1), 100*epoch_acc/(i+1)), end = '\r')
if __name__ == "main" :
    train()            
